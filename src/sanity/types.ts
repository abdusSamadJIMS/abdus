/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type HireMe = {
  _id: string;
  _type: "hireMe";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  budget?: string;
  detail?: string;
  services?: string;
};

export type Tag = {
  _id: string;
  _type: "tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  link?: string;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  tags?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "tag";
  }>;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  isCompleted?: boolean;
  completedAt?: string;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  publishedAt?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  socialMedia?: {
    twitter?: string;
    instagram?: string;
    github?: string;
    linkedIn?: string;
  };
  resume?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    _type: "file";
  };
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | Geopoint | HireMe | Tag | Project | Post | Author | SanityFileAsset | Category | Slug | BlockContent | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: GET_10_BLOGS
// Query: *[_type == "post"][0...10]{    _id,title,slug,publishedAt,mainImage{alt,asset->{url}},categories[0]->{title}}
export type GET_10_BLOGSResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  publishedAt: string | null;
  mainImage: {
    alt: string | null;
    asset: {
      url: string | null;
    } | null;
  } | null;
  categories: {
    title: string | null;
  } | null;
}>;
// Variable: GET_ALL_BLOGS
// Query: *[_type == "post"]{    _id,title,slug,publishedAt,mainImage{alt,asset->{url}},categories[0]->{title}}
export type GET_ALL_BLOGSResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  publishedAt: string | null;
  mainImage: {
    alt: string | null;
    asset: {
      url: string | null;
    } | null;
  } | null;
  categories: {
    title: string | null;
  } | null;
}>;
// Variable: GET_BLOG
// Query: *[_type == "post" && slug.current == $slug][0]{    _id,title,slug,publishedAt,mainImage{alt,asset->{url}},categories[0]->{title},body}
export type GET_BLOGResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  publishedAt: string | null;
  mainImage: {
    alt: string | null;
    asset: {
      url: string | null;
    } | null;
  } | null;
  categories: {
    title: string | null;
  } | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
} | null;
// Variable: PROJECTS
// Query: *[_type == "project"]{    title,slug,body,isCompleted,completedAt, tags[]->{title},link,mainImage{alt,asset->{url}},description}
export type PROJECTSResult = Array<{
  title: string | null;
  slug: Slug | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  isCompleted: boolean | null;
  completedAt: string | null;
  tags: Array<{
    title: string | null;
  }> | null;
  link: string | null;
  mainImage: {
    alt: string | null;
    asset: {
      url: string | null;
    } | null;
  } | null;
  description: string | null;
}>;
// Variable: PROJECT
// Query: *[_type == "project" && slug.current == $slug][0]{    title,slug,body,isCompleted,completedAt, tags[]->{title,slug},link,mainImage{alt,asset->{url}}}
export type PROJECTResult = {
  title: string | null;
  slug: Slug | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  isCompleted: boolean | null;
  completedAt: string | null;
  tags: Array<{
    title: string | null;
    slug: Slug | null;
  }> | null;
  link: string | null;
  mainImage: {
    alt: string | null;
    asset: {
      url: string | null;
    } | null;
  } | null;
} | null;
// Variable: PROJECT_HOME
// Query: *[_type == "project"] {    title,    slug,    tags[]->{        title,        slug    },      mainImage {      alt,      asset-> {        url      }    }  }
export type PROJECT_HOMEResult = Array<{
  title: string | null;
  slug: Slug | null;
  tags: Array<{
    title: string | null;
    slug: Slug | null;
  }> | null;
  mainImage: {
    alt: string | null;
    asset: {
      url: string | null;
    } | null;
  } | null;
}>;
// Variable: TAGS
// Query: *[_type == "tag"]{    title,slug}
export type TAGSResult = Array<{
  title: string | null;
  slug: Slug | null;
}>;
// Variable: AUTHOR_SOCIAL
// Query: *[_type == 'author'][0]{    socialMedia  }
export type AUTHOR_SOCIALResult = {
  socialMedia: {
    twitter?: string;
    instagram?: string;
    github?: string;
    linkedIn?: string;
  } | null;
} | null;
// Variable: RESUME
// Query: *[_type == 'author'][0]{    resume{      asset->{        url      }    }  }
export type RESUMEResult = {
  resume: {
    asset: {
      url: string | null;
    } | null;
  } | null;
} | null;
// Variable: BLOG_METADATA
// Query: *[_type == "post" && slug.current == $slug][0]{      title,      mainImage{        asset->{          url        }      },      description,      slug    }
export type BLOG_METADATAResult = {
  title: string | null;
  mainImage: {
    asset: {
      url: string | null;
    } | null;
  } | null;
  description: string | null;
  slug: Slug | null;
} | null;
// Variable: BLOG_SLUGS
// Query: *[_type == "post"]{  slug}
export type BLOG_SLUGSResult = Array<{
  slug: Slug | null;
}>;
// Variable: PROJECT_METADATA
// Query: *[_type == "project" && slug.current == $slug][0]{  title,  mainImage{    asset->{      url    }  },  description,  slug}
export type PROJECT_METADATAResult = {
  title: string | null;
  mainImage: {
    asset: {
      url: string | null;
    } | null;
  } | null;
  description: string | null;
  slug: Slug | null;
} | null;
// Variable: PROJECT_SLUGS
// Query: *[_type == "project"]{  slug}
export type PROJECT_SLUGSResult = Array<{
  slug: Slug | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"post\"][0...10]{\n    _id,title,slug,publishedAt,mainImage{alt,asset->{url}},categories[0]->{title}\n}": GET_10_BLOGSResult;
    "*[_type == \"post\"]{\n    _id,title,slug,publishedAt,mainImage{alt,asset->{url}},categories[0]->{title}\n}": GET_ALL_BLOGSResult;
    "*[_type == \"post\" && slug.current == $slug][0]{\n    _id,title,slug,publishedAt,mainImage{alt,asset->{url}},categories[0]->{title},body\n}": GET_BLOGResult;
    "*[_type == \"project\"]{\n    title,slug,body,isCompleted,completedAt, tags[]->{title},link,mainImage{alt,asset->{url}},description\n}": PROJECTSResult;
    "*[_type == \"project\" && slug.current == $slug][0]{\n    title,slug,body,isCompleted,completedAt, tags[]->{title,slug},link,mainImage{alt,asset->{url}}\n}": PROJECTResult;
    "*[_type == \"project\"] {\n    title,\n    slug,\n    tags[]->{\n        title,\n        slug\n    },  \n    mainImage {\n      alt,\n      asset-> {\n        url\n      }\n    }\n  }\n  ": PROJECT_HOMEResult;
    "*[_type == \"tag\"]{\n    title,slug\n}": TAGSResult;
    "*[_type == 'author'][0]{\n    socialMedia\n  }": AUTHOR_SOCIALResult;
    "*[_type == 'author'][0]{\n    resume{\n      asset->{\n        url\n      }\n    }\n  }": RESUMEResult;
    "\n    *[_type == \"post\" && slug.current == $slug][0]{\n      title,\n      mainImage{\n        asset->{\n          url\n        }\n      },\n      description,\n      slug\n    }\n    ": BLOG_METADATAResult;
    "*[_type == \"post\"]{\n  slug\n}": BLOG_SLUGSResult;
    "*[_type == \"project\" && slug.current == $slug][0]{\n  title,\n  mainImage{\n    asset->{\n      url\n    }\n  },\n  description,\n  slug\n}": PROJECT_METADATAResult;
    "*[_type == \"project\"]{\n  slug\n}": PROJECT_SLUGSResult;
  }
}
